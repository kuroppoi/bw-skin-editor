package io.github.kuroppoi.bwse.graphics;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;

import javax.imageio.ImageIO;

import io.github.kuroppoi.bwse.io.TileImageIO;

/**
 * A bit of a convoluted class that's responsible for managing C-Gear states and creating accurate renders for them.
 */
public class CGearRenderer {
    
    /*
     * Static rendering data
     */
    
    public static final TileMap CGEAR_BACKGROUND_MAP = new TileMap(
        0x0867, 0x0868, 0x0869, 0x086A, 0x086B, 0x086A, 0x086B, 0x086A, 0x086B, 0x086A, 0x086B, 0x086A, 0x086B, 0x086A, 0x086B, 0x086A, 0x086B, 0x086A, 0x086B, 0x086A, 0x086B, 0x086A, 0x086B, 0x086A, 0x086B, 0x086A, 0x086B, 0x086A, 0x086B, 0x0C69, 0x0C68, 0x0C67, 
        0x0847, 0x0848, 0x0828, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C4A, 0x0C49, 0x0C48, 0x0C47, 
        0x0827, 0x0828, 0x0004, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0C08, 0x0C28, 0x0C27, 
        0x0828, 0x0004, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0C08, 0x0C07, 
        0x0004, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0C08, 
        0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 
        0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 
        0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 
        0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 
        0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 
        0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 
        0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 
        0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 
        0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 
        0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 
        0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 
        0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 
        0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 
        0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 
        0x0029, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0C09, 0x0C09, 0x0C09, 0x0C04, 
        0x0007, 0x0008, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0C09, 0x0C09, 0x0C04, 0x0428, 
        0x0027, 0x0028, 0x0029, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0C09, 0x0C04, 0x0428, 0x0427, 
        0x0047, 0x0048, 0x0049, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x0428, 0x0448, 0x0447, 
        0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006A, 0x006B, 0x006A, 0x006B, 0x006A, 0x006B, 0x006A, 0x006B, 0x006A, 0x006B, 0x006A, 0x006B, 0x006A, 0x006B, 0x006A, 0x006B, 0x006A, 0x006B, 0x006A, 0x006B, 0x006A, 0x006B, 0x006A, 0x046A, 0x0469, 0x0468, 0x0467
    );

    public static final int[] CGEAR_SKIN_TILE_INDICES = {
        0x0A0, 0x0A1, 0x0A2, 0x0A3, 0x0A4, 0x0A5, 0x0A6, 0x0A7, 0x0A8, 0x0A9, 0x0AA, 0x0AB, 0x0AC, 0x0AD, 0x0AE, 0x0AF, 0x0B0, 
        0x0C0, 0x0C1, 0x0C2, 0x0C3, 0x0C4, 0x0C5, 0x0C6, 0x0C7, 0x0C8, 0x0C9, 0x0CA, 0x0CB, 0x0CC, 0x0CD, 0x0CE, 0x0CF, 0x0D0, 
        0x0E0, 0x0E1, 0x0E2, 0x0E3, 0x0E4, 0x0E5, 0x0E6, 0x0E7, 0x0E8, 0x0E9, 0x0EA, 0x0EB, 0x0EC, 0x0ED, 0x0EE, 0x0EF, 0x0F0, 
        0x100, 0x101, 0x102, 0x103, 0x104, 0x105, 0x106, 0x107, 0x108, 0x109, 0x10A, 0x10B, 0x10C, 0x10D, 0x10E, 0x10F, 0x110, 
        0x120, 0x121, 0x122, 0x123, 0x124, 0x125, 0x126, 0x127, 0x128, 0x129, 0x12A, 0x12B, 0x12C, 0x12D, 0x12E, 0x12F, 0x130, 
        0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x148, 0x149, 0x14A, 0x14B, 0x14C, 0x14D, 0x14E, 0x14F, 0x150, 
        0x160, 0x161, 0x162, 0x163, 0x164, 0x165, 0x166, 0x167, 0x168, 0x169, 0x16A, 0x16B, 0x16C, 0x16D, 0x16E, 0x16F, 0x170, 
        0x180, 0x181, 0x182, 0x183, 0x184, 0x185, 0x186, 0x187, 0x188, 0x189, 0x18A, 0x18B, 0x18C, 0x18D, 0x18E, 0x18F, 0x190, 
        0x1A0, 0x1A1, 0x1A2, 0x1A3, 0x1A4, 0x1A5, 0x1A6, 0x1A7, 0x1A8, 0x1A9, 0x1AA, 0x1AB, 0x1AC, 0x1AD, 0x1AE, 0x1AF, 0x1B0, 
        0x1C0, 0x1C1, 0x1C2, 0x1C3, 0x1C4, 0x1C5, 0x1C6, 0x1C7, 0x1C8, 0x1C9, 0x1CA, 0x1CB, 0x1CC, 0x1CD, 0x1CE, 0x1CF, 0x1D0, 
        0x1E0, 0x1E1, 0x1E2, 0x1E3, 0x1E4, 0x1E5, 0x1E6, 0x1E7, 0x1E8, 0x1E9, 0x1EA, 0x1EB, 0x1EC, 0x1ED, 0x1EE, 0x1EF, 0x1F0, 
        0x200, 0x201, 0x202, 0x203, 0x204, 0x205, 0x206, 0x207, 0x208, 0x209, 0x20A, 0x20B, 0x20C, 0x20D, 0x20E, 0x20F, 0x210, 
        0x220, 0x221, 0x222, 0x223, 0x224, 0x225, 0x226, 0x227, 0x228, 0x229, 0x22A, 0x22B, 0x22C, 0x22D, 0x22E, 0x22F, 0x230, 
        0x240, 0x241, 0x242, 0x243, 0x244, 0x245, 0x246, 0x247, 0x248, 0x249, 0x24A, 0x24B, 0x24C, 0x24D, 0x24E, 0x24F, 0x250, 
        0x260, 0x261, 0x262, 0x263, 0x264, 0x265, 0x266, 0x267, 0x268, 0x269, 0x26A, 0x26B, 0x26C, 0x26D, 0x26E, 0x26F, 0x270
    };
    
    public static final int[] CGEAR_COLORS_MALE = {
        0xADADF7, 0x312973, 0x21316B, 0x103963, 0x00425A, 0x21637B, 0x4A849C, 0x73B5CE, 0x9CDEFF, 0xC6E7FF, 0xFFFFFF, 0xADADAD, 0x6B6B6B, 0x182118, 0x081008, 0x080000,
        0xADADF7, 0x002110, 0x085229, 0x008C5A, 0x002142, 0x00397B, 0x0084EF, 0x081008, 0x212100, 0x523900, 0xEF8C00, 0x081008, 0x391010, 0x6B0818, 0xDE2139, 0x081008,
        0xADADF7, 0x001808, 0x084218, 0x006B42, 0x001839, 0x003163, 0x006BC6, 0x081008, 0x181800, 0x423100, 0xC66B00, 0x081008, 0x290808, 0x520810, 0xB51831, 0x081008,
        0xADADF7, 0x001008, 0x003118, 0x005231, 0x001831, 0x00294A, 0x005A9C, 0x081008, 0x101000, 0x312100, 0x9C5200, 0x081008, 0x180808, 0x420810, 0x8C1029, 0x081008,
        0xADADF7, 0x001008, 0x002910, 0x004229, 0x001029, 0x002139, 0x004A7B, 0x081008, 0x100800, 0x291800, 0x7B3900, 0x081008, 0x180810, 0x310810, 0x731021, 0x081008,
        0xADADF7, 0x000800, 0x001808, 0x003118, 0x001021, 0x001831, 0x003963, 0x081008, 0x080800, 0x181000, 0x632900, 0x081008, 0x180810, 0x290810, 0x5A1021, 0x081008,
        0xADADF7, 0x081008, 0x081008, 0x000808, 0x000808, 0x000808, 0x081008, 0x081008, 0x000808, 0x000808, 0x081008, 0x081008, 0x000808, 0x000808, 0x081008, 0x081008,
        0xADADF7, 0x312973, 0x21316B, 0x103963, 0x00425A, 0x003952, 0x00314A, 0x002942, 0x002939, 0x002131, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
        0xADADF7, 0x08527B, 0x084A73, 0x084263, 0x083952, 0x082942, 0x002139, 0x001829, 0x001018, 0x000808, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
    };
    
    public static final int[] CGEAR_COLORS_FEMALE = {
        0xADADF7, 0x94106B, 0xBD397B, 0xD6427B, 0xE7527B, 0xEF638C, 0xF77BA5, 0xF78CB5, 0xFFB5DE, 0xFFDEFF, 0xFFFFFF, 0xADADAD, 0x6B6B6B, 0x311818, 0x100808, 0x080000, 
        0xADADF7, 0x210010, 0x4A0839, 0x8C0063, 0x002142, 0x00397B, 0x0084EF, 0x180808, 0x212100, 0x523900, 0xEF8C00, 0x180808, 0x391010, 0x6B0818, 0xDE2139, 0x180808, 
        0xADADF7, 0x100010, 0x390839, 0x630039, 0x001839, 0x003163, 0x006BC6, 0x180808, 0x181800, 0x423100, 0xC66B00, 0x180808, 0x290808, 0x520810, 0xB51831, 0x180808, 
        0xADADF7, 0x080008, 0x290021, 0x4A0029, 0x001831, 0x00294A, 0x005A9C, 0x180808, 0x101000, 0x312100, 0x9C5200, 0x180808, 0x180808, 0x420810, 0x8C1029, 0x180808, 
        0xADADF7, 0x080008, 0x210018, 0x390021, 0x001029, 0x002139, 0x004A7B, 0x180808, 0x100800, 0x291800, 0x7B3900, 0x180808, 0x180810, 0x310810, 0x731021, 0x180808, 
        0xADADF7, 0x000000, 0x100010, 0x290021, 0x001021, 0x001831, 0x003963, 0x180808, 0x080800, 0x181000, 0x632900, 0x180808, 0x180810, 0x290810, 0x5A1021, 0x180808, 
        0xADADF7, 0x080008, 0x100008, 0x100808, 0x080008, 0x100008, 0x100808, 0x080008, 0x080008, 0x100008, 0x100808, 0x080008, 0x080008, 0x100008, 0x100808, 0x080008, 
        0xADADF7, 0x94106B, 0xBD397B, 0xD6427B, 0xE7527B, 0xE74A73, 0xDE426B, 0xDE3963, 0xD6315A, 0xCE2952, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
        0xADADF7, 0x7B0839, 0x730831, 0x630829, 0x4A0829, 0x420818, 0x310010, 0x210008, 0x100008, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
    };
    
    public static final TileMap[] CGEAR_BUTTON_MAPS = {
        new TileMap(0x18, 0x19, 0x1A, 0x1B, 0x38, 0x39, 0x3A, 0x3B, 0x58, 0x59, 0x5A, 0x5B, 0x78, 0x79, 0x7A, 0x7B), // Off
        new TileMap(0x0C, 0x0D, 0x0E, 0x0F, 0x2C, 0x2D, 0x2E, 0x2F, 0x4C, 0x4D, 0x4E, 0x4F, 0x6C, 0x6D, 0x6E, 0x6F), // Infrared
        new TileMap(0x10, 0x11, 0x12, 0x13, 0x30, 0x31, 0x32, 0x33, 0x50, 0x51, 0x52, 0x53, 0x70, 0x71, 0x72, 0x73), // Wireless
        new TileMap(0x14, 0x15, 0x16, 0x17, 0x34, 0x35, 0x36, 0x37, 0x54, 0x55, 0x56, 0x57, 0x74, 0x75, 0x76, 0x77), // Online
        new TileMap(0x18, 0x19, 0x1A, 0x1B, 0x38, 0x39, 0x3A, 0x3B, 0x58, 0x59, 0x5A, 0x5B, 0x78, 0x79, 0x7A, 0x7B)  // None
    };
    
    public static final int[] CGEAR_BUTTON_TILE_INDICES = {
        0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B,
        0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
        0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B,
        0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B
    };
    
    public static final int[] CGEAR_BUTTON_PALETTES = {
        5, 4, 3, 2, 1, 2, 3, 4, 5,
        5, 4, 3, 2, 1, 2, 3, 4, 5,
        5, 4, 3, 2, 1, 2, 3, 4, 5,
           4,    2,    2,    4
    };
    public static final int CGEAR_SKIN_PALETTE_INDEX = 10;
    public static final Tile[] CGEAR_TILES = new Tile[128];
    public static final Tile[] CGEAR_BUTTON_TILES_MALE = new Tile[320];
    public static final Tile[] CGEAR_BUTTON_TILES_FEMALE = new Tile[320];
    public static final BufferedImage[] BUTTON_TEXT_IMAGES = new BufferedImage[3];
    private static BufferedImage maleHudImage;
    private static BufferedImage femaleHudImage;
    private static BufferedImage bulletImage;
    private static boolean initialized;
    
    /*
     * Local variables
     */
    
    private final TileMap skinMap = new TileMap(768);
    private final TileSet tileSet = new TileSet();
    private final PaletteTable paletteTable = new PaletteTable();
    private final int[] currentActiveButtons = { 2, 6, 4 };
    private final int[] previousActiveButtons = { -1, -1, -1 };
    private final int[] buttonTypes = {
        0, 0, 1,  0, 3, 0,  2, 0, 0,
        1, 1, 1,  3, 3, 3,  2, 2, 2,
        4, 1, 1,  3, 3, 3,  2, 2, 4,
           4,     0,    0,     4
    };
    
    private boolean femaleColorScheme;
    private int buttonStyle;
    
    public CGearRenderer() {
        if(!initialized) {
            throw new IllegalStateException("C-Gear renderer is not initialized");
        }
        
        for(int i = 0; i < CGEAR_TILES.length; i++) {
            tileSet.setTile(i, CGEAR_TILES[i]);
        }
        
        setMaleColorScheme();
    }
    
    public static void init() throws IOException {
        if(initialized) {
            return;
        }
        
        // Load tiles
        try(InputStream inputStream = CGearRenderer.class.getResourceAsStream("/cgear/cgear_tiles.bin")) {
            for(int i = 0; i < CGEAR_TILES.length; i++) {
                CGEAR_TILES[i] = TileImageIO.readTile(inputStream);
            }
        }
        
        // Load male button tiles
        try(InputStream inputStream = CGearRenderer.class.getResourceAsStream("/cgear/button_tiles_male.bin")) {
            for(int i = 0; i < CGEAR_BUTTON_TILES_MALE.length; i++) {
                CGEAR_BUTTON_TILES_MALE[i] = TileImageIO.readTile(inputStream);
            }
        }
        
        // Load female button tiles
        try(InputStream inputStream = CGearRenderer.class.getResourceAsStream("/cgear/button_tiles_female.bin")) {
            for(int i = 0; i < CGEAR_BUTTON_TILES_FEMALE.length; i++) {
                CGEAR_BUTTON_TILES_FEMALE[i] = TileImageIO.readTile(inputStream);
            }
        }
        
        // Load images
        BUTTON_TEXT_IMAGES[0] = ImageIO.read(CGearRenderer.class.getResource("/cgear/hud_text_infrared.png"));
        BUTTON_TEXT_IMAGES[1] = ImageIO.read(CGearRenderer.class.getResource("/cgear/hud_text_wireless.png"));
        BUTTON_TEXT_IMAGES[2] = ImageIO.read(CGearRenderer.class.getResource("/cgear/hud_text_online.png"));
        maleHudImage = ImageIO.read(CGearRenderer.class.getResource("/cgear/hud_male.png"));
        femaleHudImage = ImageIO.read(CGearRenderer.class.getResource("/cgear/hud_female.png"));
        bulletImage = ImageIO.read(CGearRenderer.class.getResource("/cgear/hud_bullet.png"));
        initialized = true;
    }
    
    /*
     * Drawing functions
     */
    
    public BufferedImage drawCGear() {
        BufferedImage image = new BufferedImage(256, 192, BufferedImage.TYPE_INT_ARGB);
        drawCGear(image);
        return image;
    }
    
    public void drawCGear(BufferedImage output) {
        BufferedImage backgroundImage = drawCGearBackground();
        BufferedImage buttonsImage = drawCGearButtons();
        BufferedImage skinImage = drawCGearSkin(true);
        BufferedImage hudImage = femaleColorScheme ? femaleHudImage : maleHudImage;
        Graphics2D graphics = output.createGraphics();
        graphics.drawImage(backgroundImage, 0, 0, null);
        graphics.drawImage(buttonsImage, 0, 0, null);
        graphics.drawImage(hudImage, 0, 0, null);
        graphics.setComposite(AdditiveComposite.INSTANCE);
        graphics.drawImage(skinImage, 0, 0, null);
        graphics.dispose();
    }
    
    public BufferedImage drawCGearBackground() {
        return TileRenderer.drawTiles(256, 192, tileSet, CGEAR_BACKGROUND_MAP, paletteTable);
    }
    
    public BufferedImage drawCGearSkinTiles() {
        TileMap tileMap = new TileMap(CGEAR_SKIN_TILE_INDICES);
        tileMap.setPaletteIndex(CGEAR_SKIN_PALETTE_INDEX);
        return TileRenderer.drawTiles(136, 120, tileSet, tileMap, paletteTable);
    }
    
    public BufferedImage drawCGearSkin() {
        return drawCGearSkin(false);
    }
    
    private BufferedImage drawCGearSkin(boolean darken) {
        BufferedImage image = TileRenderer.drawTiles(256, 192, tileSet, skinMap, paletteTable);
        
        if(darken) {
            Graphics2D graphics = image.createGraphics();
            graphics.setComposite(AlphaComposite.SrcOver);
            graphics.setColor(new Color(0, 0, 0, 114)); // ~0.45 seems to produce the best result
            graphics.fillRect(0, 0, 256, 192);
            graphics.dispose();
        }
        
        return image;
    }
    
    public BufferedImage drawCGearButtons() {
        BufferedImage image = new BufferedImage(256, 192, BufferedImage.TYPE_INT_ARGB);
        Graphics2D graphics = image.createGraphics();
        
        // Draw buttons
        for(int i = 0; i < buttonTypes.length; i++) {
            int type = buttonTypes[i];
            int paletteIndex = type == 0 ? 6 : type < 4 && currentActiveButtons[type - 1] == i ? 1 : CGEAR_BUTTON_PALETTES[i];
            TileMap buttonMap = CGEAR_BUTTON_MAPS[type];
            buttonMap.setPaletteIndex(paletteIndex);
            BufferedImage buttonImage = TileRenderer.drawTiles(32, 32, tileSet, buttonMap, paletteTable);
            drawCGearButton(graphics, buttonImage, i, -16, 0);
        }
        
        // Draw bullet points
        for(int i = 0; i < currentActiveButtons.length; i++) {
            drawCGearButton(graphics, bulletImage, currentActiveButtons[i], -5, -2);
        }
        
        // Draw text
        for(int i = 0; i < currentActiveButtons.length; i++) {
            drawCGearButton(graphics, BUTTON_TEXT_IMAGES[i], currentActiveButtons[i], 18, -5);
        }
        
        graphics.dispose();
        return image;
    }
    
    private void drawCGearButton(Graphics graphics, BufferedImage image, int buttonIndex, int offsetX, int offsetY) {
        int gridX = buttonIndex % 9;
        int gridY = buttonIndex / 9;
        
        if(gridY == 3) {
            gridX = gridX * 2 + 1;
        }
        
        int startY = gridX % 2 == 1 ? 32 : 48;
        int drawX = gridX * 32 + offsetX;
        int drawY = startY + gridY * 32 + offsetY;
        graphics.drawImage(image, drawX, drawY, null);
    }
    
    /*
     * C-Gear configuration functions
     */
    
    public void setSkin(TileImage image, boolean transformIndices) {
        setSkinMap(image.getTileMap(), transformIndices);
        setSkinTiles(image.getTiles());
        setSkinPalette(image.getPalette());
    }
    
    public TileImage getSkin() {
        return new TileImage(getSkinTiles(), getSkinPalette(), getSkinMap());
    }
    
    public void setSkinMap(TileMap tileMap, boolean transformIndices) {
        for(int i = 0; i < skinMap.getIndexCount(); i++) {
            skinMap.setIndex(i, tileMap.getIndex(i));
            int tileIndex = tileMap.getTileIndex(i);
            
            if(transformIndices && tileIndex >= 0 && tileIndex < CGEAR_SKIN_TILE_INDICES.length) {
                skinMap.setPaletteIndex(i, CGEAR_SKIN_PALETTE_INDEX);
                skinMap.setTileIndex(i, CGEAR_SKIN_TILE_INDICES[tileIndex]);
            }
        }
    }
    
    public TileMap getSkinMap() {
        return skinMap;
    }
    
    public void setSkinTiles(Tile[] tiles) {
        for(int i = 0; i < CGEAR_SKIN_TILE_INDICES.length; i++) {
            int index = CGEAR_SKIN_TILE_INDICES[i];
            
            if(i < tiles.length) {
                tileSet.setTile(index, tiles[i]);
            } else {
                tileSet.getTile(index).clear();
            }
        }
    }
    
    public Tile[] getSkinTiles() {
        // TODO not very efficient
        Tile[] tiles = new Tile[CGEAR_SKIN_TILE_INDICES.length];
        
        for(int i = 0; i < tiles.length; i++) {
            tiles[i] = tileSet.getTile(CGEAR_SKIN_TILE_INDICES[i]);
        }
        
        return tiles;
    }
    
    public void setSkinPalette(Palette palette) {
        paletteTable.setPalette(CGEAR_SKIN_PALETTE_INDEX, palette);
    }
    
    public Palette getSkinPalette() {
        return paletteTable.getPalette(CGEAR_SKIN_PALETTE_INDEX);
    }
    
    public void toggleColorScheme() {
        setColorScheme(!femaleColorScheme);
    }
    
    public void setMaleColorScheme() {
        setColorScheme(false);
    }
    
    public void setFemaleColorScheme() {
        setColorScheme(true);
    }
    
    private void setColorScheme(boolean femaleColorScheme) {
        this.femaleColorScheme = femaleColorScheme;
        paletteTable.insertColors(0, femaleColorScheme ? CGEAR_COLORS_FEMALE : CGEAR_COLORS_MALE);
        updateButtonTiles();
    }
    
    public void cycleButtonStyle() {
        setButtonStyle(buttonStyle + 1);
    }
    
    public void setButtonStyle(int style) {
        buttonStyle = style % 5;
        updateButtonTiles();
    }
    
    private void updateButtonTiles() {
        Tile[] buttonTiles = femaleColorScheme ? CGEAR_BUTTON_TILES_FEMALE : CGEAR_BUTTON_TILES_MALE;
        int startIndex = buttonStyle * 64;
        
        for(int i = 0; i < 64; i++) {
            tileSet.setTile(CGEAR_BUTTON_TILE_INDICES[i], buttonTiles[i + startIndex]);
        }
    }
    
    public void cycleButtonType(int index) {
        if(index < 0 || index >= buttonTypes.length) {
            return;
        }
        
        setButtonType(index, buttonTypes[index] + 1);
    }
    
    public void setButtonType(int index, int type) {
        if(index < 0 || index >= buttonTypes.length) {
            return;
        }
        
        int currentType = buttonTypes[index];
        int nextType = type % 5;
        int firstIndex = -1;
        
        // Check if button is the last of its type
        if(currentType > 0 && currentType < 4) {            
            for(int i = 0; i < buttonTypes.length; i++) {
                if(buttonTypes[i] == currentType && index != i) {
                    firstIndex = i;
                    break;
                }
            }
            
            if(firstIndex == -1) {
                return;
            }
        }
        
        buttonTypes[index] = nextType;
        
        // Find new position for active button if it was this one
        if(currentType > 0 && currentType < 4 && currentActiveButtons[currentType - 1] == index) {
            int previous = previousActiveButtons[currentType - 1];
            currentActiveButtons[currentType - 1] = (previous != -1 && buttonTypes[previous] == currentType) ? previous : firstIndex;
        }
        
        if(nextType > 0 && nextType < 4) {
            previousActiveButtons[nextType - 1] = currentActiveButtons[nextType - 1];
            currentActiveButtons[nextType - 1] = index;
        }
    }
    
    public int getButtonIndex(int x, int y) {
        if(x < 0 || x >= 256) {
            return -1;
        }
        
        int gridX = (x + 16) / 32;
        int startY = gridX % 2 == 1 ? 32 : 48;
        int height = gridX % 2 == 1 ? 4 : 3;
        int gridY = (y - startY) / 32;
        
        if(y < startY || y >= startY + height * 32) {
            return -1;
        }

        if(gridY == 3) {
            gridX /= 2;
        }
        
        return gridY * 9 + gridX;
    }
    
    public TileSet getTileSet() {
        return tileSet;
    }
    
    public PaletteTable getPaletteTable() {
        return paletteTable;
    }
}
